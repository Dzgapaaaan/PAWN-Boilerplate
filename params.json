{"name":"PAWN Boilerplate","body":"#Contents\r\n\r\n- <a href=\"#pawn-boilerplate\">PAWN Boilerplate</a>\r\n- <a href=\"#compiling\">Compiling</a>\r\n    - <a href=\"#wine\">Wine</a>\r\n- <a href=\"#code-structure\">Code structure</a>\r\n    - <a href=\"#modules\">Modules</a>\r\n        - <a href=\"#module-files\">Files</a>\r\n            - <a href=\"#header-inc\">`header.inc`</a>\r\n            - <a href=\"#callbacks-inc\">`callbacks.inc`</a>\r\n            - <a href=\"#functions-inc\">`functions.inc`</a>\r\n            - <a href=\"#commands-inc\">`commands.inc`</a>\r\n            - <a href=\"#callbacks-\">`callbacks/`</a>\r\n        - <a href=\"#prefixes\">Prefixes</a>\r\n        - <a href=\"#creating-a-module\">Creating a module</a>\r\n    - <a href=\"#callbacks\">Callbacks</a>\r\n    - <a href=\"#file-headers\">File headers</a>\r\n        - <a href=\"#priority\">Priority</a>\r\n        - <a href=\"#requires\">Requires</a>\r\n    - <a href=\"#example-file-header\">Example file header</a>\r\n    - <a href=\"#default-modules\">Default modules</a>\r\n        - <a href=\"#staticgroups\">StaticGroups</a>\r\n            - <a href=\"#creating-static-groups\">Creating static groups</a>\r\n            - <a href=\"#creating-commands-exclusively-for-static-groups\">Creating commands exclusively for static groups</a>\r\n\r\n#<a name=\"pawn-boilerplate\" href=\"#pawn-boilerplate\">\\#</a>PAWN Boilerplate\r\n\r\nPlease note that this project is not yet officially released.\r\n\r\nPAWN Boilerplate, or PBP, is a solid base for rapidly developing large gamemodes for SA-MP servers.\r\nEverything is organized into modules, which are very easy to create and get started with.\r\n\r\nTo make this work, a pre-compiler has been created. The pre-compiler will automatically generate a main file linked to all the modules and their contents.\r\n\r\n#<a name=\"compiling\" href=\"#compiling\">\\#</a>Compiling\r\n\r\nTo compile the whole shebang, simply run `compiler/compile.bat` (or `compiler/compile` if you're on *NIX).\r\n\r\nCompiling works both on Windows, Linux, and OS X. **Note** that [Wine](http://www.winehq.org/) and [PHP](http://php.net/) is required on *NIX systems (with vcrun2005/2008).\r\n\r\n##<a name=\"wine\" href=\"#wine\">\\#</a>Wine\r\nFirst off you need to install Wine itself. If you're on OS X, the easiest way to do it is by [installing MacPorts](http://www.macports.org/install.php).\r\nSecondly, you'll need vcrun2005 and vcrun2008 to run the compiler. You get these from the command-line tool `winetricks`. Google is your friend. ;)\r\n\r\n#<a name=\"code-structure\" href=\"#code-structure\">\\#</a>Code structure\r\n\r\nThis will seem quite complex at first, having a look through some of the example modules will hopefully clear things up a little!\r\n\r\nThe main difference from a plain PAWN script is PBP consist of a module structure.\r\n\r\n##<a name=\"modules\" href=\"#modules\">\\#</a>Modules\r\n\r\n###<a name=\"module-files\" href=\"#module-files\">\\#</a>Files\r\n\r\nThe module structure looks like this:\r\n\r\n- `ModuleName/`\r\n    - `header.inc`\r\n    - `callbacks.inc`\r\n    - `functions.inc`\r\n    - `commands.inc`\r\n    - `callbacks/`\r\n        - `OnGameModeInit.inc`\r\n        - `OnPlayerConnect.inc`\r\n        - `OnSomethingSomething.inc`\r\n\r\n####<a name=\"header-inc\" href=\"#header-inc\">\\#</a>`header.inc`\r\nThis file should contain variable declarations, macros, and such.\r\n\r\n####<a name=\"callbacks-inc\" href=\"#callbacks-inc\">\\#</a>`callbacks.inc`\r\nThis file should contain forwards for callbacks (do **not** put public functions here, only forward them). The pre-compiler will scan this file in all modules and add support for the forwarded functions inside.\r\n\r\n####<a name=\"functions-inc\" href=\"#functions-inc\">\\#</a>`functions.inc`\r\nThis file should contain functions related to the class (creating forwarded, public functions for timers is acceptable).\r\n\r\n####<a name=\"commands-inc\" href=\"#commands-inc\">\\#</a>`commands.inc`\r\nThis file should contain YCMD commands. You can read about those [here](http://forum.sa-mp.com/showthread.php?t=169029).\r\n\r\n####<a name=\"callbacks-\" href=\"#callbacks-\">\\#</a>`callbacks/`\r\nThis folder should contain code to be executed inside callbacks. For example, if you create a file called `OnGameModeInit.inc`, any code inside that file will be executed when OnGameModeInit is called by the server.\r\n\r\n###<a name=\"prefixes\" href=\"#prefixes\">\\#</a>Prefixes\r\nEach module will get a prefix with its name followed by a dot. Each module will also have an alias for their prefix - **`this`**.\r\n\r\nThe main purpose of these prefixes is to allow modules to use the same variable/function names. If Module1 has a global variable called `this.someVariable`, another module could have another global variable also referred to as `this.someVariable`.\r\n\r\nSay we have 2 modules, one called ExampleModule and one called AnotherModule. We could do this to communicate between them.\r\n\r\n```C++\r\n// In ExampleModule/header.inc\r\nnew this.someVariable = 20;\r\n\r\n// In AnotherModule/functions.inc\r\nstock this.PrintSomeOtherVariable() {\r\n    printf(\"%d\", ExampleModule.someVariable);\r\n}\r\n```\r\n\r\n\r\n###<a name=\"creating-a-module\" href=\"#creating-a-module\">\\#</a>Creating a module\r\nAll you need to do is create a folder inside `gamemodes/modules/`. The name of that folder will be the name of the module. You can rename and delete folders without having to change things anywhere else (unless, ofcourse, other modules need them).\r\n\r\n\r\n##<a name=\"callbacks\" href=\"#callbacks\">\\#</a>Callbacks\r\n\r\nAs you can see in the list above, there's a folder called `callbacks`, containing files named after public functions.\r\n\r\nTo add code for a callback, simply add a file with the callback's name into the folder.\r\n\r\nThe PBP compiler will scan the `include` directory for callbacks, as well as all your `callbacks.inc` files. You must have the callback declared in one of those places to get it working\r\n\r\n##<a name=\"file-headers\" href=\"#file-headers\">\\#</a>File headers\r\nWhen you run the PBP compiler, it will automatically add headers to all module files. These headers are not only informative.\r\n\r\nLines in the header starting with `>` are essentially variables that the PBP compiler will read. \r\n\r\n###<a name=\"priority\" href=\"#priority\">\\#</a>Priority\r\nOne of those variables is called `Priority`. If you change its value, it will affect in what order the pre-compiler will include the file.\r\n\r\nFor example, if you create a callback file called `OnPlayerConnect.inc`, run the PBP compiler, change the priority in the header to `10` then the code inside that file will be the first to execute when a player connects (unless another `OnPlayerConnect.inc` has a higher priority).\r\n\r\nYou can also use negative values to have the file loaded after other ones.\r\n\r\nThe recommended range of priority values is -10 - 10.\r\n\r\n###<a name=\"requires\" href=\"#requires\">\\#</a>Requires\r\nYou can specify which other modules a file depends on (preferably `header.inc`). To do this, simply add a new line in the file header (below ` > Prefix: x`) containing a comma-separated list of other module names (case-sensitive).\r\n\r\n##<a name=\"example-file-header\" href=\"#example-file-header\">\\#</a>Example file header\r\n```C++\r\n/*!\r\n * Groups/header.inc\r\n *\r\n > Priority: 10\r\n > Requires: Core, Admin, Player\r\n */\r\n```\r\n\r\n##<a name=\"default-modules\" href=\"#default-modules\">\\#</a>Default modules\r\nPBP comes with a few modules by default. If you don't want them, you can simply remove them - the core system does not depend on any of the modules.\r\n\r\n###<a name=\"staticgroups\" href=\"#staticgroups\">\\#</a>StaticGroups\r\nThe StaticGroups module extends the functionality of y\\_commands and y\\_groups.\r\n\r\n####<a name=\"creating-static-groups\" href=\"#creating-static-groups\">\\#</a>Creating static groups\r\nYou can now declare groups as global variables with the following syntax:\r\n\r\n```C++\r\nnew StaticGroup<MY_GROUP> = \"My Group\";\r\n\r\n// In functions and such:\r\n\t// Add \"playerid\" to the group\r\n\tGroup_SetPlayer(MY_GROUP, playerid, true);\r\n```\r\n\r\n####<a name=\"creating-commands-exclusively-for-static-groups\" href=\"#creating-commands-exclusively-for-static-groups\">\\#</a>Creating commands exclusively for static groups\r\nHere's how you'd create a command only accessible for players in the `ADMIN` and `VIP` groups:\r\n\r\n```C++\r\n// In your module's header.inc\r\nnew StaticGroup<ADMIN> = \"Administrator\";\r\nnew StaticGroup<VIP>   = \"VIPs\";\r\n\r\n// In your module's commands.inc\r\nYCMD(ADMIN, VIP):kick(playerid, params[], help) {\r\n\t// ...\r\n}\r\n```","tagline":"Solid ground for a big SA-MP server script.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}